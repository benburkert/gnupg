package gnupg

import (
	"bytes"
	"testing"

	"github.com/benburkert/openpgp"
)

const (
	dummySecRing = "95009504566e4b0c010400b4e1575452ad9111befe205ff1db5c8e5779089fbf7c5d197b03b46219c13d5690634f9c4cc6d8215a11f59b1c93fa7ad2dfa389c5dbed8096f7341ea1861dea0500ba0e60866d67bad6d4fa4dfc856cde8ebf364a3046ba44cba7c9dfb612b5f844b39c3bef57edad307950121f9c116238ea42dbcfbedd7f936e6c9683e7650011010001fe036502474e5501b413203c74657374406578616d706c652e636f6d3e88b80413010200220502566e4b0c021b2f060b090807030206150802090a0b0416020301021e01021780000a0910c1a5d81643df2c45513903ff445e065e2ff21a6eb24280cd5c59058b036126775ac9f6717f941af895b3d65b4bc9a97b0e6d5cf94ebf47fec3db982612c948fb962b1e96c4c565f27c6f036d7ff911ff417b4e1ef48be3a196e8791a719b26fc21f944c3dd2d2462fc6002b6c56a21bdaca280f9e38e1c9c6503ccb8c2bd5f7e68f3da09b3ea75331702f443b00200009d01fd04566e4b0c010400c10dfabca142bc26bf0856440410467343b016874de84d5a1d44e79b333e2f024df81e4ade6d9bb14f853ff321483fe909dd889edd3f15e85f231776b76541cd8f682183131b3c7fa444ac01a61bd7f056f91ada0555b26ad6d34c0da2e15512240cb053a90a7fdb4b2972e539f8e33341152df99e86c4c694c2de732c73d4830011010001fe030302fa3385765d7b1c4f60c2aba7bc82d8534da55002eb5843d1540abc579e79764818e071e7b175c1504d8ee3f28258e2d24697d26f72608f88d55e78e84343e1a57f857959bdedebeaa61513d5be4f58a6c31d4d5cf49bd23fe7326762158157bb2cfbd3210ef9c0f01ce3739912dd05994fd4329805c8c5eebc05d205ae2285a00d875f102a3f680352450b4ac3943a528c102f3a474d5f97ea22ff09b8c82f97fcd4a5cf30ed40b9bc73016fa26adcc8ee37cbd0cbc0d45c51a4c8e91dcd6ec93f2821f89cd7b3e495b8dc9cb7b9187efcd80106857c27e1b6351feb2cd1bc6690957d1e470ca2425454c4312b0f9aebefc8b8b5dd16d700e73e020de21bb7daeff9bf2cd1b7eaf5a5b8903c46dcf0dcca8313ad3b892c177afd7c0981db6b98b482b655387cbcd912801dd8557259b4ba372b37797808064451a24cca00d9279deefc2e9bc889a9b38a76f48899365fe0189d12a8cb5a54b02fae9ea6979bd6077dda71bff3972ded77ce1489013d0418010200090502566e4b0c021b2e00a80910c1a5d81643df2c459d200419010200060502566e4b0c000a09106fd57893185e53feab2603ff4b39435eb4cd50b6c27bd4e55d5c4dddbad51950b13fdbb0d3ac0fefbd27e1cd2163dd4dc59f223b015b228a2c269c99ed85fd3369ad876012fce38066eddaedcc604d56f75d808259281134c76bd495355cebad5ed85061b4b87ac57da7844cbda3073e0bb3d1f4e5ef1a2113f2d4d19d40d43b73e03e4c802e41df40c58c475d6c03fd18425e307f79278e4f370d556114ae5f4f6956e219923bbe2db82000e15ef50bc079ac9cd5ab6bf2d4bd9b18702ba1ef8bb57df42ed64ce6a58acd9ccaee38e8d7f79a5e298e9097279e983a8e650fed33245a953b865390dd91e34b62b9c49609a81c0ff3a4d63ed0cbc580f7993958b69d9d0d3f28815fec10f3dde38c9696b0020000"

	dummyKeyId = 0xc1a5d81643df2c45
)

func TestDummyS2K(t *testing.T) {
	keyRing, err := openpgp.ReadKeyRing(readerFromHex(dummySecRing))
	if err != nil {
		t.Fatal(err)
	}

	keys := keyRing.KeysById(dummyKeyId)
	for _, key := range keys {
		buf := new(bytes.Buffer)
		if err := key.Entity.SerializePrivate(buf, nil); err != nil {
			t.Fatal(err)
		}
	}
}
